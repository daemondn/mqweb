{"name":"MQWeb","tagline":"MQWeb - Administer Websphere MQ with a browser","body":"MQWeb\r\n=====\r\n\r\nMQWeb - Administer Websphere MQ with a browser\r\n\r\nBuilding MQWeb\r\n--------------\r\n\r\n1. Get [Poco 1.5.2](http://pocoproject.org/releases/poco-1.5.2). \r\n   Poco 1.5.2 is still a development release but it is stable to run\r\n   with MQWeb. Build Poco. You can install the libraries, but it's no\r\n   requirement (see 4).\r\n   \r\n   **Remark:** Please apply this [patch](https://github.com/fbraem/poco/commit/1cb2823d2241005ecc53bbff33932916bf669f38) to correct the handle of \r\n   unicode characters in JSON.\r\n   \r\n2. Get premake4 from http://industriousone.com/premake and install it.\r\n3. Unzip the mqweb archive and go to the root directory of mqweb.\r\n4. Open premake4.lua and see if you need to change the paths for the POCO and \r\n   MQ include/lib folders.\r\n5. Run premake4 with a target (vs2008, codelite, gmake, ...).\r\n6. Build mqweb with the target you specified in step 5.\r\n7. Create mqweb.properties in the directory that contains the mqweb executable\r\n   and change the following properties:\r\n\r\n```\r\n    mq.web.static=<full path to folder where the mqweb static files are stored>\r\n    mq.web.templates=<full path to folder where the mqweb templates are stored>\r\n    mq.web.port=<port number>\r\n```\r\n\r\n   When mq.web.port is omitted, 8081 will be used.\r\n\r\nRunning MQWeb\r\n-------------\r\n\r\n1. By default mqweb connects in bindings mode. This can be changed by \r\n   setting the mq.mode property to 'client' and to configure Websphere MQ \r\n   client or mqweb. \r\n   \r\n   a) Configure Websphere MQ Client: \r\n   To connect to a queuemanager use a client channel definition table and \r\n   set the environment variables MQCHLLIB and MQCHLTAB, or use mqclient.ini \r\n   and set ChannelDefinitionFile and ChannelDefinitionDirectory (Note: on \r\n   Windows the environment variable MQCLNTCF must point to mqclient.ini). \r\n   When only one queuemanager is used MQSERVER can be used.\r\n   \r\n   b) Configure mqweb:\r\n   Add mq.web.qmgr properties as follows:\r\n```\r\n    mq.mode=client\r\n    mq.web.qmgr.<qmgrName>.connection=<host>(<port>)\r\n    mq.web.qmgr.<qmgrName>.channel=<channelName>\r\n```\r\n   Where &lt;qmgrName&gt; is the name of the queuemanager, &lt;host&gt; the server where\r\n   the queuemanager is running. &lt;port&gt; is the port of the listener and\r\n   &lt;channelName&gt; is the name of the server connection channel. When no channel\r\n   property is set, SYSTEM.DEFAULT.SVRCONN will be used as default.\r\n   \r\n2. When no name is passed in the URL, mqweb will try to connect to the default\r\n   queuemanager. In bindings mode this is done by connecting with a blank\r\n   queuemanager name. In client mode this can be configured by setting\r\n   mq.web.defaultQmgr property. When this property doesn't exist, mqweb will \r\n   try to connect with \"*\" and hopes that a client channel definition table \r\n   is configured.\r\n   \r\n3. To get the replies from the command server, MQWeb needs a queue where the replies\r\n   are put. By default a temporary queue based on the model queue SYSTEM.DEFAULT.MODEL.QUEUE\r\n   is used, but this behaviour can be changed by setting the mq.web.reply property or the\r\n   reply property of a queuemanager.\r\n```\r\n    mq.web.reply=MQWEB.REPLY.Q01\r\n```\r\n\t  or\r\n```\r\n    mq.web.qmgr.<qmgr>.reply=MQWEB.REPLY.Q01\r\n```\r\n    When you define your own local reply queue, make sure the queue is shareable.\r\n\r\nLogging\r\n-------\r\n\r\nMQWeb uses 3 loggers: mq for all MQ actions, mq.web for all daemon information and mq.web.access to log all requested URI's.\r\nTo configure these loggers look at the documentation of [Poco::Util::LoggingConfigurator](http://pocoproject.org/docs/Poco.Util.LoggingConfigurator.html).\r\nThe following example will log everything (trace level) to mqweb.log in the application directory, except for the mq.web.access logger\r\nwhich will be written to the access.log file in the application directory.\r\n\r\n```\r\n# Logger configuration\r\nlogging.loggers.root.level=trace\r\nlogging.loggers.root.channel.class=FileChannel\r\nlogging.loggers.root.channel.pattern=%Y-%m-%d %H:%M:%S %N %P-%I %q *** %t\r\nlogging.loggers.root.channel.path=${application.dir}/mqweb.log\r\n\r\nlogging.loggers.l1.name=mq\r\n\r\nlogging.loggers.l2.name=mq.web\r\n\r\nlogging.loggers.l3.name=mq.web.access\r\nlogging.loggers.l3.channel.class=FileChannel\r\nlogging.loggers.l3.channel.pattern=%Y-%m-%d %H:%M:%S *** %t\r\nlogging.loggers.l3.channel.path=${application.dir}/access.log\r\n```\r\n\r\nProtecting MQWeb\r\n----------------\r\n\r\nMQWeb can be configured to allow or deny incoming requests. First the incoming\r\nIP address is checked against all mq.web.allow addresses. Next when the IP\r\naddress is allowed, the IP address is checked against all configured mq.web.deny\r\naddresses. When nothing is configured, MQWeb will allow all incoming requests.\r\n\r\nThis example allows access from IP-addresses starting with 10 or 11. But denies\r\nall IP addresses starting with 10.192.\r\n\r\n```\r\n  mq.web.allow.ip1=10*\r\n  mq.web.allow.ip2=11*\r\n  mq.web.deny.ip1=10\\.192*\r\n```\r\nThe value of the property must be a valid regular expression.\r\n\r\nThird Party Software\r\n--------------------\r\n\r\nTo bring you a view on your queuemanager in your favorite browser, MQWeb uses the following software:\r\n\r\n+ [POCO](http://pocoproject.org) is used to write the portable HTTP server in C++, the core of MQWeb.\r\n+ [jQuery](http://jquery.org) is a fast, small and feature-rich JavaScript library. It eases the HTML document traversal and manipulation, JSON requests, ...\r\n+ [jQuery UI](http://jqueryui.com) is a curated set of user interface interactions, effects, widgets, and themes built on top of the jQuery JavaScript Library.\r\n+ [KnockoutJS](http://knockoutjs.com/) is used to render the JSON, received from the HTTP server, on the client. Rendering on the client makes it possible to write HTML pages without touching the core of MQWeb.\r\n+ [qTip2](http://qtip2.com) is used to show tool tips on the HTML pages.\r\n+ [jQuery Form Plugin](http://malsup.com/jquery/form) allows us to easily upgrade HTML forms to use AJAJ.\r\n+ [Formalize](http://formalize.me) is used to teach our forms some manners ...\r\n+ [CSS-Free-Templates](http://css-free-templates.com) has been used to select a CSS template.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}