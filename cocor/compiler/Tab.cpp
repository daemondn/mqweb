/*-------------------------------------------------------------------------
Tab -- Symbol Table Management
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

#include <map>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <set>

#include "Tab.h"
#include "Parser.h"
#include "BitArray.h"
#include "Scanner.h"

namespace Coco {

typedef std::map<std::string, std::vector<int>*> XRefMap;

const char* Tab::nTyp[] =
		{"    ", "t   ", "pr  ", "nt  ", "clas", "chr ", "wt  ", "any ", "eps ",
		 "sync", "sem ", "alt ", "iter", "opt ", "rslv"};

const char* Tab::tKind[] = {"fixedToken", "classToken", "litToken", "classLitToken"};

Tab::Tab(Parser *parser) 
{
	for (int i=0; i<10; i++) ddt[i] = false;

	dummyNode = NULL;
	dummyName = 'A';

	this->parser = parser;
	trace = parser->trace;
	errors = parser->errors;
	eofSy = NewSym(Node::t, "EOF", 0);
	dummyNode = NewNode(Node::eps, (Symbol*)NULL, 0);
	checkEOF = true;
}

Tab::~Tab()
{
  for(std::vector<Symbol*>::iterator it = terminals.begin(); it != terminals.end(); it++) 
  {
    delete *it;
  }
  for(std::vector<Symbol*>::iterator it = pragmas.begin(); it != pragmas.end(); it++) 
  {
    delete *it;
  }
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
    delete *it;
  }
  for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
  {
    delete *it;
  }
  for(std::vector<CharClass*>::iterator it = classes.begin(); it != classes.end(); it++) 
  {
    delete *it;
  }
}

Symbol* Tab::NewSym(int typ, const std::string& name, int line) 
{
  std::string nameCopy(name);
	if (name.length() == 2 && name[0] == '"') 
  {
		parser->SemErr("empty token not allowed");
		nameCopy = "???";
	}
	Symbol *sym = new Symbol(typ, nameCopy, line);

	if (typ == Node::t) {
    sym->n = terminals.size(); terminals.push_back(sym);
	} else if (typ == Node::pr) {
    pragmas.push_back(sym);
	} else if (typ == Node::nt) {
    sym->n = nonterminals.size(); nonterminals.push_back(sym);
	}

	return sym;
}

Symbol* Tab::FindSym(const std::string& name) 
{
  for (std::vector<Symbol*>::iterator it = terminals.begin(); it != terminals.end(); it++) 
  {
    if ((*it)->name.compare(name) == 0) return *it;
	}
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
    if ((*it)->name.compare(name) == 0) return *it;
	}
	return NULL;
}

int Tab::Num(Node *p) {
	if (p == NULL) return 0; else return p->n;
}

void Tab::PrintSym(Symbol *sym) 
{
  std::string paddedName = Name(sym->name);
	fprintf(trace, "%3d %14s %s", sym->n, paddedName.c_str(), nTyp[sym->typ]);

	if (sym->attrPos==NULL) fprintf(trace, " false "); else fprintf(trace, " true  ");
	if (sym->typ == Node::nt) {
		fprintf(trace, "%5d", Num(sym->graph));
		if (sym->deletable) fprintf(trace, " true  "); else fprintf(trace, " false ");
	} else
		fprintf(trace, "            ");

	fprintf(trace, "%5d %s\n", sym->line, tKind[sym->tokenKind]);
}

void Tab::PrintSymbolTable() {
	fprintf(trace, "Symbol Table:\n");
	fprintf(trace, "------------\n\n");
	fprintf(trace, " nr name          typ  hasAt graph  del    line tokenKind\n");

  for(std::vector<Symbol*>::iterator it = terminals.begin(); it != terminals.end(); it++) 
  {
		PrintSym(*it);
	}
  
  for(std::vector<Symbol*>::iterator it = pragmas.begin(); it != pragmas.end(); it++) 
  {
		PrintSym(*it);
	}
  
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		PrintSym(*it);
	}

  fprintf(trace, "\nLiteral Tokens:\n");
	fprintf(trace, "--------------\n");

  for(SymbolHashMap::Iterator itLit = literals.begin(); itLit != literals.end(); itLit++)
  {
    Symbol *sym = itLit->second;
    if ( sym != NULL )
    {
      fprintf(trace, "_%s =  %s.\n", sym->name.c_str(), itLit->first.c_str());
    }
	}
	fprintf(trace, "\n");
}

void Tab::PrintSet(BitArray *s, int indent) {
	int col, len;
	col = indent;
	Symbol *sym;
  for(std::vector<Symbol*>::iterator it = terminals.begin(); it != terminals.end(); it++)
  {
		sym = *it;
		if ((*s)[sym->n]) 
    {
      len = sym->name.length();
			if (col + len >= 80) 
      {
				fprintf(trace, "\n");
				for (col = 1; col < indent; col++) fprintf(trace, " ");
			}
      fprintf(trace, "%s ", sym->name.c_str());
			col += len + 1;
		}
	}
	if (col == indent) fprintf(trace, "-- empty set --");
	fprintf(trace, "\n");
}

//---------------------------------------------------------------------
//  Syntax graph management
//---------------------------------------------------------------------

Node* Tab::NewNode(int typ, Symbol *sym, int line) {
	Node* node = new Node(typ, sym, line);
	node->n = nodes.size();
	nodes.push_back(node);
	return node;
}


Node* Tab::NewNode(int typ, Node* sub) {
	Node* node = NewNode(typ, (Symbol*)NULL, 0);
	node->sub = sub;
	return node;
}

Node* Tab::NewNode(int typ, int val, int line) {
	Node* node = NewNode(typ, (Symbol*)NULL, line);
	node->val = val;
	return node;
}


void Tab::MakeFirstAlt(Graph *g) {
	g->l = NewNode(Node::alt, g->l); g->l->line = g->l->sub->line;
	g->r->up = true;
	g->l->next = g->r;
	g->r = g->l;
}

// The result will be in g1
void Tab::MakeAlternative(Graph *g1, Graph *g2) {
	g2->l = NewNode(Node::alt, g2->l); g2->l->line = g2->l->sub->line;
	g2->l->up = true;
	g2->r->up = true;
	Node *p = g1->l; while (p->down != NULL) p = p->down;
	p->down = g2->l;
	p = g1->r; while (p->next != NULL) p = p->next;
	// append alternative to g1 end list
	p->next = g2->l;
	// append g2 end list to g1 end list
	g2->l->next = g2->r;
}

// The result will be in g1
void Tab::MakeSequence(Graph *g1, Graph *g2) {
	Node *p = g1->r->next; g1->r->next = g2->l; // link head node
	while (p != NULL) {  // link substructure
		Node *q = p->next; p->next = g2->l;
		p = q;
	}
	g1->r = g2->r;
}

void Tab::MakeIteration(Graph *g) {
	g->l = NewNode(Node::iter, g->l);
	g->r->up = true;
	Node *p = g->r;
	g->r = g->l;
	while (p != NULL) {
		Node *q = p->next; p->next = g->l;
		p = q;
	}
}

void Tab::MakeOption(Graph *g) {
	g->l = NewNode(Node::opt, g->l);
	g->r->up = true;
	g->l->next = g->r;
	g->r = g->l;
}

void Tab::Finish(Graph *g) {
	Node *p = g->r;
	while (p != NULL) {
		Node *q = p->next; p->next = NULL;
		p = q;
	}
}

void Tab::DeleteNodes() 
{
  for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
  {
    delete *it;
  }
  nodes.clear();
	dummyNode = NewNode(Node::eps, (Symbol*)NULL, 0);
}

Graph* Tab::StrToGraph(const std::string& str) {
  std::string subStr(str, 1, str.length()-2);
  std::string s = Unescape(subStr);
	if (s.length() == 0) parser->SemErr("empty token not allowed");
	Graph *g = new Graph();
	g->r = dummyNode;
	for (int i = 0; i < s.length(); i++) {
		Node *p = NewNode(Node::chr, (int)s[i], 0);
		g->r->next = p; g->r = p;
	}
	g->l = dummyNode->next; dummyNode->next = NULL;
	return g;
}


void Tab::SetContextTrans(Node *p) { // set transition code in the graph rooted at p
	while (p != NULL) {
		if (p->typ == Node::chr || p->typ == Node::clas) {
			p->code = Node::contextTrans;
		} else if (p->typ == Node::opt || p->typ == Node::iter) {
			SetContextTrans(p->sub);
		} else if (p->typ == Node::alt) {
			SetContextTrans(p->sub); SetContextTrans(p->down);
		}
		if (p->up) break;
		p = p->next;
	}
}

//------------ graph deletability check -----------------

bool Tab::DelGraph(Node* p) {
	return p == NULL || (DelNode(p) && DelGraph(p->next));
}

bool Tab::DelSubGraph(Node* p) {
	return p == NULL || (DelNode(p) && (p->up || DelSubGraph(p->next)));
}

bool Tab::DelNode(Node* p) {
	if (p->typ == Node::nt) {
		return p->sym->deletable;
	}
	else if (p->typ == Node::alt) {
		return DelSubGraph(p->sub) || (p->down != NULL && DelSubGraph(p->down));
	}
	else {
		return p->typ == Node::iter || p->typ == Node::opt || p->typ == Node::sem
				|| p->typ == Node::eps || p->typ == Node::rslv || p->typ == Node::sync;
	}
}

//----------------- graph printing ----------------------

int Tab::Ptr(Node *p, bool up) {
	if (p == NULL) return 0;
	else if (up) return -(p->n);
	else return p->n;
}

std::string Tab::Pos(Position *pos) {
  std::string format;
	if (pos == NULL) {
		format = "     ";
	} else 
  {
    std::stringstream ss;
    ss << pos->beg;
    format = ss.str();
		//coco_swprintf(format, 10, "%5d", pos->beg);
	}
	return format;
}

std::string Tab::Name(const std::string& name) {
  std::string name2 = name + "           ";
  std::string subName2(name2, 0, 12);
	return subName2;
	// found no simpler way to get the first 12 characters of the name
	// padded with blanks on the right
}

void Tab::PrintNodes() {
	fprintf(trace, "Graph nodes:\n");
	fprintf(trace, "----------------------------------------------------\n");
	fprintf(trace, "   n type name          next  down   sub   pos  line\n");
	fprintf(trace, "                               val  code\n");
	fprintf(trace, "----------------------------------------------------\n");

	Node *p;
  for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
  {
		p = *it;
		fprintf(trace, "%4d %s ", p->n, (nTyp[p->typ]));
		if (p->sym != NULL) {
      std::string paddedName = Name(p->sym->name);
      fprintf(trace, "%12s ", paddedName.c_str());
		} else if (p->typ == Node::clas) {
			CharClass *c = classes[p->val];
      std::string paddedName = Name(c->name);
      fprintf(trace, "%12s ", paddedName.c_str());
		} else fprintf(trace, "             ");
		fprintf(trace, "%5d ", Ptr(p->next, p->up));

		if (p->typ == Node::t || p->typ == Node::nt || p->typ == Node::wt) {
			fprintf(trace, "             %5s", Pos(p->pos).c_str());
		} if (p->typ == Node::chr) {
			fprintf(trace, "%5d %5d       ", p->val, p->code);
		} if (p->typ == Node::clas) {
			fprintf(trace, "      %5d       ", p->code);
		} if (p->typ == Node::alt || p->typ == Node::iter || p->typ == Node::opt) {
			fprintf(trace, "%5d %5d       ", Ptr(p->down, false), Ptr(p->sub, false));
		} if (p->typ == Node::sem) {
			fprintf(trace, "             %5s", Pos(p->pos).c_str());
		} if (p->typ == Node::eps || p->typ == Node::any || p->typ == Node::sync) {
			fprintf(trace, "                  ");
		}
		fprintf(trace, "%5d\n", p->line);
	}
	fprintf(trace, "\n");
}

//---------------------------------------------------------------------
//  Character class management
//---------------------------------------------------------------------


CharClass* Tab::NewCharClass(const std::string& name, CharSet *s) {
	CharClass *c;
	if (name.compare("#") == 0) 
  {
    std::stringstream ss;
    ss << name;
    ss << dummyName++;
    std::string temp(ss.str());
		c = new CharClass(temp, s);
	} else {
		c = new CharClass(name, s);
	}
	c->n = classes.size();
	classes.push_back(c);
	return c;
}

CharClass* Tab::FindCharClass(const std::string& name) {
  for(std::vector<CharClass*>::iterator it = classes.begin(); it != classes.end(); it++) 
  {
		if ((*it)->name.compare(name) == 0) return *it;
	}
	return NULL;
}

CharClass* Tab::FindCharClass(CharSet *s) {
  for(std::vector<CharClass*>::iterator it = classes.begin(); it != classes.end(); it++) 
  {
		if (s->Equals((*it)->set)) return *it;
	}
	return NULL;
}

CharSet* Tab::CharClassSet(int i) {
	return classes[i]->set;
}

//----------- character class printing

std::string Tab::Ch(const char ch) {
  std::stringstream ss;
	if (ch < ' ' || ch >= 127 || ch == '\'' || ch == '\\') {
		ss << (int) ch;
	} else {
		ss << "'" << ch << "'";
	}
  return ss.str();
}

void Tab::WriteCharSet(CharSet *s) {
	for (CharSet::Range *r = s->head; r != NULL; r = r->next) {
		if (r->from < r->to) {
      std::string from = Ch(r->from);
      std::string to = Ch(r->to);
      fprintf(trace, "%s .. %s ", from.c_str(), to.c_str());
		}
		else {
      std::string from = Ch(r->from);
      fprintf(trace, "%s ", from.c_str());
		}
	}
}

void Tab::WriteCharClasses () {
  for(std::vector<CharClass*>::iterator it = classes.begin(); it != classes.end(); it++) 
  {
    std::string format2 = (*it)->name;
    format2 += "            ";
    std::string format  = format2;
		format += ": ";
    fprintf(trace, format.c_str());

		WriteCharSet((*it)->set);
		fprintf(trace, "\n");
	}
	fprintf(trace, "\n");
}

//---------------------------------------------------------------------
//  Symbol set computations
//---------------------------------------------------------------------

/* Computes the first set for the given Node. */
BitArray* Tab::First0(Node *p, BitArray *mark) {
	BitArray *fs = new BitArray(terminals.size());
	while (p != NULL && !((*mark)[p->n])) {
		mark->Set(p->n, true);
		if (p->typ == Node::nt) {
			if (p->sym->firstReady) {
				fs->Or(p->sym->first);
			} else {
				BitArray *fs0 = First0(p->sym->graph, mark);
				fs->Or(fs0);
				delete fs0;
			}
		}
		else if (p->typ == Node::t || p->typ == Node::wt) {
			fs->Set(p->sym->n, true);
		}
		else if (p->typ == Node::any) {
			fs->Or(p->set);
		}
		else if (p->typ == Node::alt) {
			BitArray *fs0 = First0(p->sub, mark);
			fs->Or(fs0);
			delete fs0;
			fs0 = First0(p->down, mark);
			fs->Or(fs0);
			delete fs0;
		}
		else if (p->typ == Node::iter || p->typ == Node::opt) {
			BitArray *fs0 = First0(p->sub, mark);
			fs->Or(fs0);
			delete fs0;
		}

		if (!DelNode(p)) break;
		p = p->next;
	}
	return fs;
}

BitArray* Tab::First(Node *p) {
	BitArray *mark = new BitArray(nodes.size());
	BitArray *fs = First0(p, mark);
	delete mark;
	if (ddt[3]) {
		fprintf(trace, "\n");
		if (p != NULL) fprintf(trace, "First: node = %d\n", p->n );
		else fprintf(trace, "First: node = null\n");
		PrintSet(fs, 0);
	}
	return fs;
}


void Tab::CompFirstSets() 
{
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		(*it)->first = new BitArray(terminals.size());
		(*it)->firstReady = false;
	}
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		(*it)->first = First((*it)->graph);
		(*it)->firstReady = true;
	}
}

void Tab::CompFollow(Node *p) {
	while (p != NULL && !((*visited)[p->n])) {
		visited->Set(p->n, true);
		if (p->typ == Node::nt) {
			BitArray *s = First(p->next);
			p->sym->follow->Or(s);
			if (DelGraph(p->next))
				p->sym->nts->Set(curSy->n, true);
		} else if (p->typ == Node::opt || p->typ == Node::iter) {
			CompFollow(p->sub);
		} else if (p->typ == Node::alt) {
			CompFollow(p->sub); CompFollow(p->down);
		}
		p = p->next;
	}
}

void Tab::Complete(Symbol *sym) {
	if (!((*visited)[sym->n])) {
		visited->Set(sym->n, true);
		Symbol *s;
    for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
    {
			s = *it;
			if ((*(sym->nts))[s->n]) {
				Complete(s);
				sym->follow->Or(s->follow);
				if (sym == curSy) sym->nts->Set(s->n, false);
			}
		}
	}
}

void Tab::CompFollowSets() {
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		(*it)->follow = new BitArray(terminals.size());
		(*it)->nts = new BitArray(nonterminals.size());
	}
	gramSy->follow->Set(eofSy->n, true);
	visited = new BitArray(nodes.size());
  // get direct successors of nonterminals
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		curSy = *it;
		CompFollow((*it)->graph);
	}

	// add indirect successors to followers
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		visited = new BitArray(nonterminals.size());
		curSy = *it;
		Complete(*it);
	}
}

Node* Tab::LeadingAny(Node *p) {
	if (p == NULL) return NULL;
	Node *a = NULL;
	if (p->typ == Node::any) a = p;
	else if (p->typ == Node::alt) {
		a = LeadingAny(p->sub);
		if (a == NULL) a = LeadingAny(p->down);
	}
	else if (p->typ == Node::opt || p->typ == Node::iter) a = LeadingAny(p->sub);
	if (a == NULL && DelNode(p) && !p->up) a = LeadingAny(p->next);
	return a;
}

void Tab::FindAS(Node *p) { // find ANY sets
	Node *a;
	while (p != NULL) {
		if (p->typ == Node::opt || p->typ == Node::iter) {
			FindAS(p->sub);
			a = LeadingAny(p->sub);
			if (a != NULL) Sets::Subtract(a->set, First(p->next));
		} else if (p->typ == Node::alt) {
			BitArray *s1 = new BitArray(terminals.size());
			Node *q = p;
			while (q != NULL) {
				FindAS(q->sub);
				a = LeadingAny(q->sub);
				if (a != NULL) {
					BitArray *tmp = First(q->down);
					tmp->Or(s1);
					Sets::Subtract(a->set, tmp);
				} else {
					BitArray *f = First(q->sub);
					s1->Or(f);
					delete f;
				}
				q = q->down;
			}
		}

		// Remove alternative terminals before ANY, in the following
		// examples a and b must be removed from the ANY set:
		// [a] ANY, or {a|b} ANY, or [a][b] ANY, or (a|) ANY, or
		// A = [a]. A ANY
		if (DelNode(p)) {
			a = LeadingAny(p->next);
			if (a != NULL) {
				Node *q = (p->typ == Node::nt) ? p->sym->graph : p->sub;
				Sets::Subtract(a->set, First(q));
			}
		}

		if (p->up) break;
		p = p->next;
	}
}

void Tab::CompAnySets() {
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		FindAS((*it)->graph);
	}
}

BitArray* Tab::Expected(Node *p, Symbol *curSy) {
	BitArray *s = First(p);
	if (DelGraph(p))
		s->Or(curSy->follow);
	return s;
}

// does not look behind resolvers; only called during LL(1) test and in CheckRes
BitArray* Tab::Expected0(Node *p, Symbol *curSy) {
	if (p->typ == Node::rslv) return new BitArray(terminals.size());
	else return Expected(p, curSy);
}

void Tab::CompSync(Node *p) {
	while (p != NULL && !(visited->Get(p->n))) {
		visited->Set(p->n, true);
		if (p->typ == Node::sync) {
			BitArray *s = Expected(p->next, curSy);
			s->Set(eofSy->n, true);
			allSyncSets->Or(s);
			p->set = s;
		} else if (p->typ == Node::alt) {
			CompSync(p->sub); CompSync(p->down);
		} else if (p->typ == Node::opt || p->typ == Node::iter)
			CompSync(p->sub);
		p = p->next;
	}
}

void Tab::CompSyncSets() {
	allSyncSets = new BitArray(terminals.size());
	allSyncSets->Set(eofSy->n, true);
	visited = new BitArray(nodes.size());

  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		curSy = *it;
		CompSync(curSy->graph);
	}
}

void Tab::SetupAnys() {
	Node *p;
  for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
  {
		p = *it;
		if (p->typ == Node::any) {
			p->set = new BitArray(terminals.size(), true);
			p->set->Set(eofSy->n, false);
		}
	}
}

void Tab::CompDeletableSymbols() {
	bool changed;
	Symbol *sym;
	do {
		changed = false;
    for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
    {
			sym = *it;
			if (!sym->deletable && sym->graph != NULL && DelGraph(sym->graph)) {
				sym->deletable = true; changed = true;
			}
		}
	} while (changed);

  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		sym = *it;
		if (sym->deletable)
      printf("  %s deletable\n", sym->name.c_str());
	}
}

void Tab::RenumberPragmas() {
	int n = terminals.size();
	Symbol *sym;
  for(std::vector<Symbol*>::iterator it = pragmas.begin(); it != pragmas.end(); it++) 
  {
		sym = *it;
		sym->n = n++;
	}
}

void Tab::CompSymbolSets() {
	CompDeletableSymbols();
	CompFirstSets();
	CompAnySets();
	CompFollowSets();
	CompSyncSets();
	if (ddt[1]) {
		fprintf(trace, "\n");
		fprintf(trace, "First & follow symbols:\n");
		fprintf(trace, "----------------------\n\n");

		Symbol *sym;
    for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
    {
			sym = *it;
      fprintf(trace, "%s\n", sym->name.c_str());
			fprintf(trace, "first:   "); PrintSet(sym->first, 10);
			fprintf(trace, "follow:  "); PrintSet(sym->follow, 10);
			fprintf(trace, "\n");
		}
	}
	if (ddt[4]) {
		fprintf(trace, "\n");
		fprintf(trace, "ANY and SYNC sets:\n");
		fprintf(trace, "-----------------\n");

		Node *p;
    for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
    {
			p = *it;
			if (p->typ == Node::any || p->typ == Node::sync) {
				fprintf(trace, "%4d %4s ", p->n, nTyp[p->typ]);
				PrintSet(p->set, 11);
			}
		}
	}
}

//---------------------------------------------------------------------
//  String handling
//---------------------------------------------------------------------

char Tab::Hex2Char(const std::string& s) {
	int val = 0;
	int len = s.length();
	for (int i = 0; i < len; i++) {
		char ch = s[i];
		if ('0' <= ch && ch <= '9') val = 16 * val + (ch - '0');
		else if ('a' <= ch && ch <= 'f') val = 16 * val + (10 + ch - 'a');
		else if ('A' <= ch && ch <= 'F') val = 16 * val + (10 + ch - 'A');
		else parser->SemErr("bad escape sequence in string or character");
	}
	if (val >= COCO_WCHAR_MAX) {/* pdt */
		parser->SemErr("bad escape sequence in string or character");
	}
	return (char) val;
}

std::string Tab::Char2Hex(const char ch) 
{
  std::stringstream ss;
  ss.setf(std::ios_base::hex, std::ios::basefield);
  ss << std::hex << std::setw(4) << ch;  
	return "\\0x" + ss.str();
}

std::string Tab::Unescape (const std::string& s) {
	/* replaces escape sequences in s by their Unicode values. */
  std::string buf;
	int i = 0;
	int len = s.length();
	while (i < len) {
		if (s[i] == '\\') {
			switch (s[i+1]) {
				case '\\': buf += '\\'; i += 2; break;
				case '\'': buf += '\''; i += 2; break;
				case '\"': buf += '\"'; i += 2; break;
				case 'r': buf += '\r'; i += 2; break;
				case 'n': buf += '\n'; i += 2; break;
				case 't': buf += '\t'; i += 2; break;
				case '0': buf += '\0'; i += 2; break;
				case 'a': buf += '\a'; i += 2; break;
				case 'b': buf += '\b'; i += 2; break;
				case 'f': buf += '\f'; i += 2; break;
				case 'v': buf += '\v'; i += 2; break;
				case 'u': case 'x':
					if (i + 6 <= s.length()) 
          {
            std::string subS(s, i+2, 4);
						buf += Hex2Char(subS); i += 6; break;
					} else {
						parser->SemErr("bad escape sequence in string or character");
						i = s.length(); break;
					}
				default:
						parser->SemErr("bad escape sequence in string or character");
					i += 2; break;
			}
		} else {
			buf += s[i];
			i++;
		}
	}

	return buf;
}


std::string Tab::Escape (const std::string& s) {
  std::string buf;
	char ch;
	int len = s.length();
	for (int i=0; i < len; i++) {
		ch = s[i];
		switch(ch) {
			case '\\': buf += "\\\\"; break;
			case '\'': buf += "\\'"; break;
			case '\"': buf += "\\\""; break;
			case '\t': buf += "\\t"; break;
			case '\r': buf += "\\r"; break;
			case '\n': buf += "\\n"; break;
			default:
				if ((ch < ' ') || (ch > 0x7f)) {
          std::string res = Char2Hex(ch);
					buf += res;
				} else
					buf += ch;
				break;
		}
	}
	return buf;
}


//---------------------------------------------------------------------
//  Grammar checks
//---------------------------------------------------------------------

bool Tab::GrammarOk() {
	bool ok = NtsComplete()
		&& AllNtReached()
		&& NoCircularProductions()
		&& AllNtToTerm();
    if (ok) { CheckResolvers(); CheckLL1(); }
    return ok;
}


//--------------- check for circular productions ----------------------

void Tab::GetSingles(Node *p, std::vector<Symbol*> &singles) {
	if (p == NULL) return;  // end of graph
	if (p->typ == Node::nt) {
    if (p->up || DelGraph(p->next)) singles.push_back(p->sym);
	} else if (p->typ == Node::alt || p->typ == Node::iter || p->typ == Node::opt) {
		if (p->up || DelGraph(p->next)) {
			GetSingles(p->sub, singles);
			if (p->typ == Node::alt) GetSingles(p->down, singles);
		}
	}
	if (!p->up && DelNode(p)) GetSingles(p->next, singles);
}

bool Tab::NoCircularProductions() {
	bool ok, changed, onLeftSide, onRightSide;
  std::vector<CNode*> list;

	Symbol *sym;
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		sym = *it;
    std::vector<Symbol*> singles;
		GetSingles(sym->graph, singles); // get nonterminals s such that sym-->s
    for(std::vector<Symbol*>::iterator its = singles.begin(); its != singles.end(); its++) 
    {
      list.push_back(new CNode(sym, *its));
		}
	}

	CNode *n;
	do 
  {
		changed = false;
    std::vector<CNode*>::iterator it1 = list.begin();
    while(it1 != list.end()) 
    {
			n = *it1;
			onLeftSide = false; onRightSide = false;
			CNode *m;
      for(std::vector<CNode*>::iterator it2 = list.begin(); it2 != list.end(); it2++) 
      {
				m = *it2;
				if (n->left == m->right) onRightSide = true;
				if (n->right == m->left) onLeftSide = true;
			}
			if (!onLeftSide || !onRightSide) 
      {
        delete *it1; 
        it1 = list.erase(it1); 
        changed = true;
			}
      else
      {
        it1++;
      }
		}
	} while(changed);
	ok = true;

  for(std::vector<CNode*>::iterator it = list.begin(); it != list.end(); it++) 
  {
		n = *it;
		ok = false; 
    errors->count++;
    printf("  %s --> %s", n->left->name.c_str(), n->right->name.c_str());
    delete n;
	}
	return ok;
}


//--------------- check for LL(1) errors ----------------------

void Tab::LL1Error(int cond, Symbol *sym) {
  printf("  LL1 warning in %s: ", curSy->name.c_str());
  if (sym != NULL) printf("%s is ", sym->name.c_str());
	switch (cond) {
		case 1: printf("start of several alternatives\n"); break;
		case 2: printf("start & successor of deletable structure\n"); break;
		case 3: printf("an ANY node that matches no symbol\n"); break;
		case 4: printf("contents of [...] or {...} must not be deletable\n"); break;
	}
}


void Tab::CheckOverlap(BitArray *s1, BitArray *s2, int cond) {
	Symbol *sym;
  for(std::vector<Symbol*>::iterator it = terminals.begin(); it != terminals.end(); it++) 
  {
		sym = *it;
		if ((*s1)[sym->n] && (*s2)[sym->n]) {
			LL1Error(cond, sym);
		}
	}
}

void Tab::CheckAlts(Node *p) {
	BitArray *s1, *s2;
	while (p != NULL) {
		if (p->typ == Node::alt) {
			Node *q = p;
			s1 = new BitArray(terminals.size());
			while (q != NULL) { // for all alternatives
				s2 = Expected0(q->sub, curSy);
				CheckOverlap(s1, s2, 1);
				s1->Or(s2);
				CheckAlts(q->sub);
				q = q->down;
			}
		} else if (p->typ == Node::opt || p->typ == Node::iter) {
			if (DelSubGraph(p->sub)) LL1Error(4, NULL); // e.g. [[...]]
			else {
				s1 = Expected0(p->sub, curSy);
				s2 = Expected(p->next, curSy);
				CheckOverlap(s1, s2, 2);
			}
			CheckAlts(p->sub);
		} else if (p->typ == Node::any) {
			if (Sets::Elements(p->set) == 0) LL1Error(3, NULL);
			// e.g. {ANY} ANY or [ANY] ANY or ( ANY | ANY )
		}
		if (p->up) break;
		p = p->next;
	}
}

void Tab::CheckLL1() {
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		curSy = *it;
		CheckAlts(curSy->graph);
	}
}

//------------- check if resolvers are legal  --------------------

void Tab::ResErr(Node *p, const std::string& msg) {
	errors->Warning(p->line, p->pos->col, msg);
}

void Tab::CheckRes(Node *p, bool rslvAllowed) {
	while (p != NULL) {

		Node *q;
		if (p->typ == Node::alt) {
			BitArray *expected = new BitArray(terminals.size());
			for (q = p; q != NULL; q = q->down)
				expected->Or(Expected0(q->sub, curSy));
			BitArray *soFar = new BitArray(terminals.size());
			for (q = p; q != NULL; q = q->down) {
				if (q->sub->typ == Node::rslv) {
					BitArray *fs = Expected(q->sub->next, curSy);
					if (Sets::Intersect(fs, soFar))
						ResErr(q->sub, "Warning: Resolver will never be evaluated. Place it at previous conflicting alternative.");
					if (!Sets::Intersect(fs, expected))
						ResErr(q->sub, "Warning: Misplaced resolver: no LL(1) conflict.");
				} else soFar->Or(Expected(q->sub, curSy));
				CheckRes(q->sub, true);
			}
		} else if (p->typ == Node::iter || p->typ == Node::opt) {
			if (p->sub->typ == Node::rslv) {
				BitArray *fs = First(p->sub->next);
				BitArray *fsNext = Expected(p->next, curSy);
				if (!Sets::Intersect(fs, fsNext))
					ResErr(p->sub, "Warning: Misplaced resolver: no LL(1) conflict.");
			}
			CheckRes(p->sub, true);
		} else if (p->typ == Node::rslv) {
			if (!rslvAllowed)
				ResErr(p, "Warning: Misplaced resolver: no alternative.");
		}

		if (p->up) break;
		p = p->next;
		rslvAllowed = false;
	}
}

void Tab::CheckResolvers() {
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		curSy = *it;
		CheckRes(curSy->graph, false);
	}
}


//------------- check if every nts has a production --------------------

bool Tab::NtsComplete() {
	bool complete = true;
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		if ((*it)->graph == NULL) 
    {
				complete = false; 
        errors->count++;
        printf("  No production for %s\n", (*it)->name.c_str());
		}
	}
	return complete;
}

//-------------- check if every nts can be reached  -----------------

void Tab::MarkReachedNts(Node *p) {
	while (p != NULL) {
		if (p->typ == Node::nt && !((*visited)[p->sym->n])) { // new nt reached
			visited->Set(p->sym->n, true);
			MarkReachedNts(p->sym->graph);
		} else if (p->typ == Node::alt || p->typ == Node::iter || p->typ == Node::opt) {
			MarkReachedNts(p->sub);
			if (p->typ == Node::alt) MarkReachedNts(p->down);
		}
		if (p->up) break;
		p = p->next;
	}
}

bool Tab::AllNtReached() {
	bool ok = true;
	visited = new BitArray(nonterminals.size());
	visited->Set(gramSy->n, true);
	MarkReachedNts(gramSy->graph);
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		if (!((*visited)[(*it)->n])) 
    {
				ok = false; errors->count++;
        printf("  %s cannot be reached\n", (*it)->name.c_str());
		}
	}
	return ok;
}

//--------- check if every nts can be derived to terminals  ------------

bool Tab::IsTerm(Node *p, BitArray *mark) { // true if graph can be derived to terminals
	while (p != NULL) {
		if (p->typ == Node::nt && !((*mark)[p->sym->n])) return false;
		if (p->typ == Node::alt && !IsTerm(p->sub, mark)
		&& (p->down == NULL || !IsTerm(p->down, mark))) return false;
		if (p->up) break;
		p = p->next;
	}
	return true;
}


bool Tab::AllNtToTerm() {
	bool changed, ok = true;
	BitArray *mark = new BitArray(nonterminals.size());
	// a nonterminal is marked if it can be derived to terminal symbols
	Symbol *sym;
	do {
		changed = false;
    for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
    {
			sym = *it;
			if (!((*mark)[sym->n]) && IsTerm(sym->graph, mark)) {
				mark->Set(sym->n, true); changed = true;
			}
		}
	} while (changed);
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		sym = *it;
		if (!((*mark)[sym->n])) {
				ok = false; errors->count++;
        printf("  %s cannot be derived to terminals\n", sym->name.c_str());
		}
	}
	return ok;
}

//---------------------------------------------------------------------
//  Cross reference list
//---------------------------------------------------------------------

void Tab::XRef() 
{
  XRefMap xref;

	// collect lines where symbols have been defined
	Symbol *sym;
  for(std::vector<Symbol*>::iterator it = nonterminals.begin(); it != nonterminals.end(); it++) 
  {
		sym = *it;
    XRefMap::iterator xrefIt = xref.find(sym->name);
    std::vector<int>* list = NULL;
		if (xrefIt == xref.end()) 
    {
      list = new std::vector<int>(); 
      xref.insert(std::make_pair<std::string, std::vector<int>* >(sym->name, list));
    }
    else
    {
      list = xrefIt->second;
    }
    list->push_back(- sym->line);
	}
	// collect lines where symbols have been referenced
	Node *n;
  for(std::vector<Node*>::iterator it = nodes.begin(); it != nodes.end(); it++) 
  {
		n = *it;
		if (n->typ == Node::t || n->typ == Node::wt || n->typ == Node::nt) 
    {
      XRefMap::iterator xrefIt = xref.find(n->sym->name);
      std::vector<int>* list = NULL;
  		if (xrefIt == xref.end()) 
      {
        list = new std::vector<int>(); 
        xref.insert(std::make_pair<std::string, std::vector<int>* >(n->sym->name, list));
      }
      else
      {
        list = xrefIt->second;
      }
			list->push_back(n->line);
		}
	}
	// print cross reference list
	fprintf(trace, "\n");
	fprintf(trace, "Cross reference list:\n");
	fprintf(trace, "--------------------\n\n");

  for(XRefMap::iterator it = xref.begin(); it != xref.end(); it++) 
  {
    std::string paddedName = Name(it->first);
    fprintf(trace, "  %12s", paddedName.c_str());
    std::vector<int> *list = it->second;
		int col = 14;
    for (std::vector<int>::iterator it2 = it->second->begin(); it2 != it->second->end(); it2++) 
    {
			if (col + 5 > 80) {
				fprintf(trace, "\n");
				for (col = 1; col <= 14; col++) fprintf(trace, " ");
			}
			fprintf(trace, "%5d", *it2); col += 5;
		}
		fprintf(trace, "\n");

    delete list;
	}
	fprintf(trace, "\n\n");
}

void Tab::SetDDT(const std::string& s) {
  std::string st = s;
  std::transform(st.begin(), st.end(), st.begin(), ::toupper);
	wchar_t ch;
	int len = st.length();
	for (int i = 0; i < len; i++) {
		ch = st[i];
		if ('0' <= ch && ch <= '9') ddt[ch - '0'] = true;
		else switch (ch) {
			case 'A' : ddt[0] = true; break; // trace automaton
			case 'F' : ddt[1] = true; break; // list first/follow sets
			case 'G' : ddt[2] = true; break; // print syntax graph
			case 'I' : ddt[3] = true; break; // trace computation of first sets
			case 'J' : ddt[4] = true; break; // print ANY and SYNC sets
			case 'P' : ddt[8] = true; break; // print statistics
			case 'S' : ddt[6] = true; break; // list symbol table
			case 'X' : ddt[7] = true; break; // list cross reference table
			default : break;
		}
	}
}


void Tab::SetOption(const std::string& s) {
	// example: $namespace=xxx
	//   index of '=' is 10 => nameLenght = 10
	//   start index of xxx = 11

	int nameLenght = s.find('=');
	int valueIndex = nameLenght + 1;

  std::string name(s, 0, nameLenght);
  std::string value(s, valueIndex);

  if (name.compare("$namespace") == 0) {
    if (nsName.empty()) nsName = value;
	} else if (name.compare("$checkEOF") == 0) {
		checkEOF = value.compare("true") == 0;
	}
}


}; // namespace
