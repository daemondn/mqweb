/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

/*----------------------------------------------------------------------
Scanner.h Specification
-----------------------------------------------------------------------*/

-->begin

#if !defined(-->prefixCOCO_SCANNER_H__)
#define -->prefixCOCO_SCANNER_H__

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

#include <vector>
#include <iostream>
#include <string>
#include <algorithm>

#include <Poco/HashMap.h>

// io.h and fcntl are used to ensure binary read from streams on windows
#if _MSC_VER >= 1300
#include <io.h>
#include <fcntl.h>
#endif

#define COCO_WCHAR_MAX 65535
#define COCO_MIN_BUFFER_LENGTH 1024
#define COCO_MAX_BUFFER_LENGTH (64*COCO_MIN_BUFFER_LENGTH)
#define COCO_HEAP_BLOCK_SIZE (64*1024)
#define COCO_CPP_NAMESPACE_SEPARATOR ':'

-->namespace_open

class Token  
{
public:
	int kind;     // token kind
	int pos;      // token position in bytes in the source text (starting at 0)
	int charPos;  // token position in characters in the source text (starting at 0)
	int col;      // token column (starting at 1)
	int line;     // token line (starting at 1)
	std::string val; // token value
	Token *next;  // ML 2005-03-11 Peek tokens are kept in linked list

	Token();
	~Token();
};

typedef Poco::HashMap<int, int> StartStates;
typedef Poco::HashMap<std::string, int> KeywordMap;

class Scanner {
private:
	unsigned char EOL;
	int eofSym;
	int noSym;
	int maxT;
	int charSetSize;
	StartStates start;
	KeywordMap keywords;

	Token *t;         // current token
	std::string tval;    // text of current token
	int tlen;         // length of current token

	std::vector<Token *> tokens;    // list of tokens already peeked (first token is a dummy)
  std::vector<Token *>::iterator pt;        // current peek token

	int ch;           // current input character
-->casing0
	int pos;          // byte position of current character
	int charPos;      // position by unicode characters starting with 0
	int line;         // line number of current character
	int col;          // column number of current character
	int oldEols;      // EOLs that appeared in a comment;

	Token* CreateToken();
	void SetScannerBehindT();

	void Init();
	void NextCh();
	void AddCh();
-->commentsheader
	Token* NextToken();
  int getKeywordIdentifier(const std::string& keyword, int def) const;
  int getStartState(int key) const;

public:
	std::istream& buffer;   // scanner buffer

	Scanner(std::istream& in);	
	~Scanner();
	Token* Scan();
	Token* Peek();
	void ResetPeek();

}; // end Scanner

-->namespace_close

#endif

-->implementation

/*----------------------------------------------------------------------
Scanner.cpp Specification
-----------------------------------------------------------------------*/

-->begin
#include <iostream>

#include <memory.h>
#include "Scanner.h"

-->namespace_open


Token::Token() {
	kind = 0;
	pos  = 0;
	col  = 0;
	line = 0;
}

Token::~Token() {
}


Scanner::Scanner(std::istream& in) : buffer(in)
{
  Init();
}

Scanner::~Scanner() {
}

void Scanner::Init() {
	EOL    = '\n';
	eofSym = 0;
-->declarations

	tval.clear(); // text of current token

	pos = -1; line = 1; col = 0; charPos = -1;
	oldEols = 0;
	NextCh();
	if (ch == 0xEF) { // check optional byte order mark for UTF-8
		NextCh(); int ch1 = ch;
		NextCh(); int ch2 = ch;
		if (ch1 != 0xBB || ch2 != 0xBF) {
			printf("Illegal byte order mark at start of file");
			exit(1);
		}
		NextCh();
	}

-->initialization
  pt = tokens.begin(); // first token is a dummy
}

void Scanner::NextCh() {
	if (oldEols > 0) { ch = EOL; oldEols--; }
	else {
		pos = buffer.tellg();
		// buffer reads unicode chars, if UTF8 has been detected
		ch = buffer.get(); col++; charPos++;
		// replace isolated '\r' by '\n' in order to make
		// eol handling uniform across Windows, Unix and Mac
		if (ch == '\r' && buffer.peek() != '\n') ch = EOL;
		if (ch == EOL) { line++; col = 0; }
	}
-->casing1
}

void Scanner::AddCh() {
	if (ch != (COCO_WCHAR_MAX + 1))
  {
    tlen++;
-->casing2
		NextCh();
	}
}

-->comments

Token* Scanner::CreateToken() 
{
	Token *t = new Token();
  tokens.push_back(t);
	return t;
}

Token* Scanner::NextToken() {
  tval.clear();

	while (ch == ' ' ||
-->scan1
	) NextCh();
-->scan2
	int recKind = noSym;
	int recEnd = pos;
	t = CreateToken();
	t->pos = pos; t->col = col; t->line = line; t->charPos = charPos;
	int state = getStartState(ch);
	tlen = 0; AddCh();

	switch (state) {
		case -1: { t->kind = eofSym; break; } // NextCh already done
		case 0: {
			case_0:
			if (recKind != noSym) {
				tlen = recEnd - t->pos;
				SetScannerBehindT();
			}
			t->kind = recKind; break;
		} // NextCh already done
-->scan3
	}
  t->val = tval;
	return t;
}

void Scanner::SetScannerBehindT() {
	buffer.seekg(t->pos, std::ios::beg);
	NextCh();
	line = t->line; col = t->col; charPos = t->charPos;
	for (int i = 0; i < tlen; i++) NextCh();
}

// get the next token (possibly a token already seen during peeking)
Token* Scanner::Scan() {
  if ( pt == tokens.end() ) 
  {
		Token* t = NextToken();
    pt = tokens.end();
    return t;
	} 

  Token *t = *pt;
  pt++;
	return t;
}

// peek for the next token, ignore pragmas
Token* Scanner::Peek() {
	do 
  {
		if (pt == tokens.end() ) 
    {
			NextToken();
		}
		pt++;
	} while ((*pt)->kind > maxT); // skip pragmas

	return *pt;
}

// make sure that peeking starts at the current scan position
void Scanner::ResetPeek() {
	pt = tokens.begin();
}

int Scanner::getKeywordIdentifier(const std::string &keyword, int def) const
{
  KeywordMap::ConstIterator it = keywords.find(keyword);
  if ( it == keywords.end() )
  {
    return def;
  }
  return it->second;
}

int Scanner::getStartState(int key) const
{
	StartStates::ConstIterator it = start.find(key);
	if ( it == start.end() )
	{
		return 0;
  }
  return it->second;
}

-->namespace_close
