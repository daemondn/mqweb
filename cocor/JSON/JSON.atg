#include <Poco/DynamicAny.h>

#include <JSON/Object.h>
#include <JSON/Array.h>

COMPILER JSON

	Poco::DynamicAny _result;

CHARACTERS
	stringChar = ANY - '"' - '\\' .
	digit      = "0123456789" .
	hexDigit   = digit + "ABCDEFabcdef" .
		
TOKENS
	string = 
	  '"' { stringChar 
	      | '\\' ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "/"
               | "u" hexDigit hexDigit hexDigit hexDigit
               )
	      } 
	  '"' .
	number =
	 digit { digit } .
	 
	float = 
	  ['-'] digit { digit } '.' { digit } [('E' | 'e') ['+'|'-'] digit { digit }] .
	
IGNORE '\t' + '\r' + '\n'

PRODUCTIONS

JSON (. JSON::Object obj; JSON::Array array; .)
= 
    OBJECT<obj> (. _result = obj; .)
  | ARRAY<array> (. _result = array; .)
.
  
OBJECT<JSON::Object& obj>
= 
  '{' { ROWS<obj> } '}' 
.

ROWS<JSON::Object& obj>
=
  ROW<obj> { ',' ROW<obj> }
.

ROW<JSON::Object& obj> (. std::string name; Poco::DynamicAny value; .)
= 
  KEY<name>
  ':' 
  VALUE<value> (. obj.set(name, value); .)
.

KEY<std::string& name>
=
  string (. name = t->val; name = name.substr(1, name.size() - 2); .)
.

VALUE<Poco::DynamicAny& value> (. JSON::Object obj; JSON::Array array; .)
= 
    OBJECT<obj> (. value = obj; .)
  | ARRAY<array> (. value = array; .)
  | string (. 
              //value = t->val.substr(1, t->val.size() - 2);
              std::string s;
              std::string::iterator it = t->val.begin();
              it++; // Skip first "
              for(; it != t->val.end(); it++)
              {
                if ( *it == '\\' ) // An escaped character
                {
                  it++;
                  switch(*it)
                  {
                    case '"': s += '"'; break;
                    case '\\': s += '\\'; break;
                    case '/': s += '/'; break;
                    case 'b': s += '\b'; break;
                    case 'f': s += '\f'; break;
                    case 'n': s += '\n'; break;
                    case 'r': s += '\r'; break;
                    case 't': s += '\t'; break;
                    case 'u':
                    {
                      char nextChar = 0;
                      for(int i = 0; i < 4; i++)
                      {
                        nextChar <<= 4;
                        it++;
                        if ( it == t->val.end() ) // End reached is a failure. TODO: throw an exception?
                          break;
                        
                        if (*it >= '0' && *it <= '9')
                          nextChar |= (*it - '0');
                        else if (*it >= 'A' && *it <= 'F')
                          nextChar |= (10 + (*it - 'A'));
                        else if (*it >= 'a' && *it <= 'f')
                          nextChar |= (10 + (*it - 'a'));                        
                      }
                      if ( it != t->val.end() ) // End reached is a failure!
                      {
                        s += nextChar;
                      }
                      break;
                    }
                  }
                }
                else if ( *it != '"' )
                {
                  s += *it;
                }
              }
              value = s; 
           .)
  | float (. value = t->val; double d = value.convert<double>(); value = d; .) 
  | number (. value = t->val; long l = value.convert<long>(); value = l; .)
  | "true" (. value = true; .)
  | "false" (. value = false; .)
  | "null" (. value.empty(); .)
.

ARRAY<JSON::Array& array> 
= 
  '[' 
     { ELEMENTS<array> }
  ']' 
.

ELEMENTS<JSON::Array& array> (. Poco::DynamicAny value; .)
=
  VALUE<value> (. array.add(value); .)  
  { ',' VALUE<value> (. array.add(value); .) } 
.
  
END JSON.
